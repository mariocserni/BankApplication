<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="oldPasswordError.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKV1BQCldQUEpXUFKaV1BWyldQWtpXUF2aV1
        BfKcawT9kV8C/pBeAvSQXgLbkF4Cr5FfAm6RXwIrkmECBJJgAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKV1BQCldQUDpXUFN6V1BZeldQXfpXUF+6V1
        Bf+ldQX/nW0E/5JgAv+QXgL/kF4C/5BeAv+QXgL/kF4C/JBeAuCQXgKZkV8COJJgAgSSYAIAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKV1BACldQUApXUFGqV1BYmldQXqpXUF/6V1
        Bf+ldQX/pXUF/51tBP+SYAL/kF4C/5BeAv+QXgL/kF4C/5BeAv+QXgL/kF4C/5BeAv+QXgLrkF4Ci5Ff
        AhuQXgIAlWMCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACldQUApXUFAKV1BTWldQXCpXUF/qV1
        Bf+ldQX/pXUF/6V1Bf+dbQT/kmAC/5BeAv+QXgL/kF4C/5BeAv+QXgL/kF4C/5BeAv+QXgL/kF4C/5Be
        Av+QXgL+kF4CxJFfAjeMWQEAk2ECAAAAAAAAAAAAAAAAAAAAAAAAAAAApXUFAKV1BQCldQVBpXUF2aV1
        Bf+ldQX/pXUF/6V1Bf+ldQX/nW0E/5JgAv+QXgL/kF4C/5BeAv+QXgL/kF4C/5BeAv+QXgL/kF4C/5Be
        Av+QXgL/kF4C/5BeAv+QXgL/kF4C2pFfAkONXAEAk2EDAAAAAAAAAAAAAAAAAKV1BQCldQUApXUFNaV1
        BdildQX/pXUF/6V1Bf+ldQX/pXUF/51tBP+SYAL/kF4C/5BeAv+QXgL/kF4C/5BeAv+QXgL/kF4C/5Be
        Av+QXgL/kF4C/5BeAv+QXgL/kF4C/5BeAv+QXgL/kF4C2pFfAjeQXgIAlGIDAAAAAAAAAAAApXUFAKV1
        BRqldQXBpXUF/6V1Bf+ldQX/pXUF/6V1Bf+dbQT/kmAC/5BeAv+QXgL/kF4C/5BeAv+QXgL/kF4C/5Be
        Av+QXgL/kF4C/5BeAv+QXgL/kF4C/5BeAv+QXgL/kF4C/5BeAv+QXgL/kF4Cw5FfAhuRXwIAAAAAAKV1
        BQCldQUCpXUFiaV1Bf+ldQX/pXUF/6V1Bf+kdAP/nGoB/5BeAP+PXAD/j1wA/49cAP+PXAD/j1wA/49c
        AP+PXAD/j1wA/49cAP+PXAD/j1wA/49cAP+PXAD/j1wA/49dAf+QXgL/kF4C/5BeAv+QXgL/kF4Ci5Rj
        AgOSYAIApXUFAKV1BTildQXppXUF/6V1Bf+ldQX/pXUF/62EJ/+pgjn/p4A3/6eAN/+ngDf/p4A3/6eA
        N/+ngDf/p4A3/6eAN/+ngDf/p4A3/6eAN/+ngDf/p4A3/6eAN/+ogTj/oHQl/5BeAv+QXgL/kF4C/5Be
        Av+QXgLqkV8COZBeAgCldQUDpXUFl6V1Bf+ldQX/pXUF/6V1Bf+ldQX/zrV6//fx6P/28ef/9/Lp//jz
        6v/48+r/9/Hn//fx6P/48+r/+PPq//fx6P/38ef/+PPq//jz6v/38un/9vHn//fx6P/Eqnn/kF4C/5Be
        Av+QXgL/kF4C/5BeAv+QXgKZlWMCA6V1BSqldQXfpXUF/6V1Bf+ldQX/pXUF/6R0BP+vhCH/3MWW//ft
        3v/k0rb/17+X/9nBm//x5dP/69zF/9i/mP/Yv5j/69zF//Hl0//ZwZv/17+X/+TStv/27N7/1r2V/55w
        H/+PXQH/kF4C/5BeAv+QXgL/kF4C/5BeAt+RXwIrpXUFbaV1BfuldQX/pXUF/6V1Bf+ldQX/pXUF/6V0
        BP+ugx//8enY/7iYXf+PXQD/k2MK/+DTuf/Ntoz/kF4C/5BeAv/Ntoz/4NO4/5NjCv+PXQD/uJhd/+7m
        1/+cbx3/j10B/5BeAv+QXgL/kF4C/5BeAv+QXgL/kF4C+5RjAm6ldQWtpXUF/6V1Bf+ldQX/pXUF/6V1
        Bf+ldQX/pHQD/66CHf/x6dj/t5Zb/45bAP+SYQf/4NK4/8y1i/+PXAD/j1wA/8y1i//g0rj/kmEH/45b
        AP+3l1v/7ubY/5tuGv+PXQD/kF4C/5BeAv+QXgL/kF4C/5BeAv+YZwP/o3IFrKV1BdmldQX/pXUF/6V1
        Bf+ldQX/pXUF/6V1Bf+kdAP/roId//Hp2P+3llv/jlsA/5JhB//g0rj/zLWL/49cAP+PXAD/zLWL/+DS
        uP+SYQf/jlsA/7eXW//u5tj/m24a/49dAP+QXgL/kF4C/5BeAv+QXgL/mGcD/6NzBf+ldQXZpXUF8qV1
        Bf+ldQX/pXUF/6V1Bf+ldQX/pXUF/6R0A/+ugh3/8enY/7eWW/+OWwD/kmEH/+DSuP/MtYv/j1wA/49c
        AP/MtYv/4NK4/5JhB/+OWwD/t5db/+7m2P+bbhr/j10A/5BeAv+QXgL/kF4C/5hnA/+jcwX/pXUF/6V1
        BfKldQX9pXUF/6V1Bf+ldQX/pXUF/6V1Bf+ldQX/pHQD/62BHP/w6df/tpZa/45bAP+SYQf/4NK4/8y1
        i/+PXAD/j1wA/8y1iv/g0rj/kmEH/45bAP+3llr/7ebX/5ptGv+PXQD/kF4C/5BeAv+YZwP/o3MF/6V1
        Bf+ldQX/pXUF/aV1Bf2ldQX/pXUF/6V1Bf+ldQX/pXUF/6V1Bf+icQD/qX8m//Lp2v++oGn/jFgA/5Vk
        Dv/l177/072W/49cAf+PXAH/072W/+XXvv+VZA7/jFgA/76faf/x6Nr/oHQm/45bAP+QXgL/mGcD/6Nz
        Bf+ldQX/pXUF/6V1Bf+ldQX9pXUF8qV1Bf+ldQX/pXUF/6V1Bf+ldQX/pXUF/7iURf/QupH/+/Ts/+LS
        t/+8nmf/xap6//bt4P/t4c7/v6Ju/7+ibv/t4c7/9u3g/8Wre/+8nmf/4tK3//v07P/QuZH/rIdD/5hn
        A/+jcwX/pXUF/6V1Bf+ldQX/pXUF/6V1BfKldQXZpXUF/6V1Bf+ldQX/pXUF/6V1Bf+ldQX/w6Rb/+nb
        v//79Oz//Pbw//z27v/89u7/+/Xu//v17v/89u///Pbv//v17v/79e7//Pbu//z27v/89vD/+/Ts/+nc
        v//Colv/o3MF/6V1Bf+ldQX/pXUF/6V1Bf+ldQX/pXUF2aV1Ba2ldQX/pXUF/6V1Bf+ldQX/pXUF/6V1
        Bf+kdAP/q34W/8qqZf/u3cH/+e3e//Li0P/v3sr/797K/+/eyv/v3sr/797K/+/eyv/y4tD/+e3e/+7d
        wf/Kq2b/q34W/6R0A/+ldQX/pXUF/6V1Bf+ldQX/pXUF/6V1Bf+ldQWspXUFbaV1BfuldQX/pXUF/6V1
        Bf+ldQX/pXUF/6V1Bf+ldAT/pHQD/7GGJf/UuH//79/H/+7eyv/n0rr/5dC3/+XQt//n0rr/7t7K/+/f
        x//UuYD/sYcl/6R0A/+ldAT/pXUF/6V1Bf+ldQX/pXUF/6V1Bf+ldQX/pXUF+6V1BWyldQUqpXUF36V1
        Bf+ldQX/pXUF/6V1Bf+ldQX/pXUF/6V1Bf+ldQX/pHQD/6V2Bv+4kTj/3caY//Hizv/t28b/7dvG//Hi
        zv/expj/uZE4/6Z2Bv+kdAP/pXUF/6V1Bf+ldQX/pXUF/6V1Bf+ldQX/pXUF/6V1Bf+ldQXepXUFKqV1
        BQOldQWXpXUF/6V1Bf+ldQX/pXUF/6V1Bf+ldQX/pXUF/6V1Bf+ldQX/pXUF/6RzAv+oeQz/wZ5O/+XR
        rP/l0az/wZ5P/6h5DP+kcwL/pXUF/6V1Bf+ldQX/pXUF/6V1Bf+ldQX/pXUF/6V1Bf+ldQX/pXUF/6V1
        BZeldQUDpXUFAKV1BTildQXppXUF/6V1Bf+ldQX/pXUF/6V1Bf+ldQX/pXUF/6V1Bf+ldQX/pXUF/6V1
        BP+kcwL/q34V/6t+Ff+kcwL/pXUE/6V1Bf+ldQX/pXUF/6V1Bf+ldQX/pXUF/6V1Bf+ldQX/pXUF/6V1
        Bf+ldQXppXUFOKV1BQCldQUApXUFAqV1BYmldQX/pXUF/6V1Bf+ldQX/pXUF/6V1Bf+ldQX/pXUF/6V1
        Bf+ldQX/pXUF/6V1Bf+ldQT/pXUE/6V1Bf+ldQX/pXUF/6V1Bf+ldQX/pXUF/6V1Bf+ldQX/pXUF/6V1
        Bf+ldQX/pXUF/6V1BYqldQUCpXUFAAAAAACldQUApXUFGqV1BcGldQX/pXUF/6V1Bf+ldQX/pXUF/6V1
        Bf+ldQX/pXUF/6V1Bf+ldQX/pXUF/6V1Bf+ldQX/pXUF/6V1Bf+ldQX/pXUF/6V1Bf+ldQX/pXUF/6V1
        Bf+ldQX/pXUF/6V1Bf+ldQXBpXUFGqV1BQAAAAAAAAAAAKV1BQCldQUApXUFNqV1BdmldQX/pXUF/6V1
        Bf+ldQX/pXUF/6V1Bf+ldQX/pXUF/6V1Bf+ldQX/pXUF/6V1Bf+ldQX/pXUF/6V1Bf+ldQX/pXUF/6V1
        Bf+ldQX/pXUF/6V1Bf+ldQX/pXUF2aV1BTaldQUApXUFAAAAAAAAAAAAAAAAAKV1BQCldQUApXUFQaV1
        BdmldQX/pXUF/6V1Bf+ldQX/pXUF/6V1Bf+ldQX/pXUF/6V1Bf+ldQX/pXUF/6V1Bf+ldQX/pXUF/6V1
        Bf+ldQX/pXUF/6V1Bf+ldQX/pXUF/6V1BdmldQVBpXUFAKV1BQAAAAAAAAAAAAAAAAAAAAAAAAAAAKV1
        BQCldQUApXUFNaV1BcKldQX+pXUF/6V1Bf+ldQX/pXUF/6V1Bf+ldQX/pXUF/6V1Bf+ldQX/pXUF/6V1
        Bf+ldQX/pXUF/6V1Bf+ldQX/pXUF/6V1Bf6ldQXCpXUFNaV1BQCldQUAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAKV1BgCldQUApXUFGqV1BYmldQXqpXUF/6V1Bf+ldQX/pXUF/6V1Bf+ldQX/pXUF/6V1
        Bf+ldQX/pXUF/6V1Bf+ldQX/pXUF/6V1Bf+ldQXqpXUFiaV1BRqldQUApXUFAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACldQUApXUFA6V1BTeldQWXpXUF36V1BfuldQX/pXUF/6V1
        Bf+ldQX/pXUF/6V1Bf+ldQX/pXUF/6V1BfuldQXgpXUFmKV1BTeldQUDpXUFAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAApXUFAKV1BQSldQUppXUFbaV1
        Ba2ldQXZpXUF86V1Bf2ldQX9pXUF86V1BdqldQWtpXUFbaV1BSqldQUEpXUFAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/4AB//4AAH/8AAA/+AAAH/AAAA/gAAAHwAAAA4AAAAGAAAABAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAAcAA
        AAPgAAAH8AAAD/gAAB/8AAA//gAAf/+AAf8=
</value>
  </data>
  <metadata name="newPasswordError.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>147, 17</value>
  </metadata>
  <metadata name="confirmNewPasswordError.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>277, 17</value>
  </metadata>
</root>